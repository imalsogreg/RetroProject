CONTDATA
 -contdata & contdata utils handle continuous data like eeg, possibly
  also e.pos, etc
 -obj/cont is mostly a wrapper for the contdata struct. Used for
  caching, dispatching of processing

TODO:
 -update documentation/helptext
 -merge cont obj with cont data:
  -make an hg branch!
  -just add fields from obj to cdat:
   -timewin/timewini/chans/chanlabels can go into contdrawopt? --how
    to plot multiple views on a single cdat?
   -keep contvar idea around, but now as a sibling
    relationship/deprecated hack
   -get rid of filtopt/envopt/chans abstraction layer, and require user to
    actually perform operations before plotting?
    -does away with nice ability to specify filter props in plots? but
     we can reimplement this above cont
    -update obj cache searching (should be easier?)

 -'just-in-time filtering' on just selected region, rather than whole
  contdata
 -contdata/epd merge. named fields, etc? (see also objtodo/sltodo),
  posfiltsec, posifilt...
 -when multiple channels specified, allow for arbitrary functions
  (mean/max/min/med/var) on the data.
 -order of operations for filt/env/mean/chans, etc? Caching gets
  harder and harder!

 -history of operations on a cdat? file imported from, etc...? Each
  cont* function could add an entry to a history list consisting of
  it's args. interaction with order of operations?

BUGS:

DOC:
    -imcont - import data into contstruct
    -contfilt - apply filtstruct to contstruct
    -contresamp - resample data in a contstruct
    -contchans - select channels from multichannel contstruct
    -contenv - add the 'envelope' as a second channel (hilbert transform)
    -contbouts - find above-threshold bouts


IMCONT/IMCONTHIST
CONTENV
CONTRESAMP
CONTCHANS
CONTPHASE
  -handle multiple channels
CONTFILT 
  -what order to do resampling/filtering?
  -accepts 'filt' objects made by mkfilt, should also just accept 'filtopt'?
  -nonlinear filters? test islinear?

CONTBOUTS
  -below-threshold events (added 'invert' option. test?)


MKCONT 

  -is mkcont the 'dispatcher function' takes cont and 'contopt',
   returns cont? 'resample', 'env', 'align' 'filt', does things in the
   right order.
  -is there a right order?: resample, filter (+ autoresample?), env.
  -cache intermediate steps? (i.e. un-enveloped, filtered signal
   before taking env?)

MKCONTOPT

  -filtopt
  -envelope
  -resample

MKCONTDRAWOPT
DRAWCONT

-'surf' for drawcont, with non-uniform y-axes?/ or ylabel them
 correctly. Isn't the idea with cont images is that they are distinct
 signals? although, consider multiple slopes.

-bars, points, stem (format string in plotdefs)

-subsampling is arbitrary. (e.g. sampsperpix = 20); performs a soft
 kind of 'max' operation when zoomed out b/c of overlap. Worse for
 images, no softmax? use downsampnl('arr', contdata, 'newsz' [100 1],
 'blkfn', @max, 'decimate', true);

 DATA TIMING

-one big eeg data file across days, (hard b/c diff machines have
 different timestamps).

-'contalign'? to resample all signals at a new timebase/offset (xi)?
 using x(findnearest(x,xi,'sorted'), or interp1q for linear
 interpolation. Since these interps could introduce jitter, phase
 distortion etc, better to do this before resampling? Yes, since freq
 (in rad/sample) is lower, and we are closer to DC
 cf. http://ccrma.stanford.edu/~jos/pasp/Linear_Interpolation_Filter.html
 
-what if we do nearest neighbor across eeg1/2/3 using same xi at near
 the real samplefreq, but during import and against the real
 timestamps? then max_tserr is 1/2 sample cycle (= 0.25msec, 1 cycle
 at 4khz, 1/20th of a cycle at 200Hz = 18deg; ), with very infrequent
 (can we count them?) jumps where we repeat/miss a sample, with a
 nasty, local effect. interp1 with pchip is probably healthy and
 reasonable (cf lagrange interpolation on that website, it's awesome)

-how long does the AD card take to poll the various channels? is this
 fixed (i.e. <1 ts), no matter what the timing rate.

